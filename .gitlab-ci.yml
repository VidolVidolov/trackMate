image: docker:stable

services:
  - name: docker:28.1.1-dind
    alias: docker

stages:
  - build
  - test
  - push
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  REGISTRY: registry.gitlab.com/vivividolov-group/trackmate
  DEFAULT_TAG: latest
  TEMP_TAG: temp-${CI_COMMIT_SHORT_SHA}

before_script:
  - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $REGISTRY

after_script:
  - docker logout $REGISTRY

# ---------- FRONTEND JOBS ----------

build-frontend:
  stage: build
  script:
    - |
      echo "VITE_GOOGLE_API_KEY=$VITE_GOOGLE_API_KEY" > frontend/.env
      echo "VITE_GOOGLE_MAP_STYLE_ID=$VITE_GOOGLE_MAP_STYLE_ID" >> frontend/.env
      echo "VITE_BACKEND_BASE_URL=$VITE_BACKEND_BASE_URL" >> frontend/.env
      echo "VITE_BACKEND_WEBSOCKET_URL=$VITE_BACKEND_WEBSOCKET_URL" >> frontend/.env
    - docker build -t $REGISTRY/frontend:$TEMP_TAG ./frontend
    - docker push $REGISTRY/frontend:$TEMP_TAG

test-frontend:
  stage: test
  needs: [build-frontend]
  script:
    - docker pull $REGISTRY/frontend:$TEMP_TAG
    - docker run --rm --user=root $REGISTRY/frontend:$TEMP_TAG npm test

push-frontend:
  stage: push
  needs: [test-frontend]
  script:
    - docker pull $REGISTRY/frontend:$TEMP_TAG
    - docker tag $REGISTRY/frontend:$TEMP_TAG $REGISTRY/frontend:$DEFAULT_TAG
    - docker tag $REGISTRY/frontend:$TEMP_TAG $REGISTRY/frontend:${CI_COMMIT_SHORT_SHA}
    - docker push $REGISTRY/frontend:$DEFAULT_TAG
    - docker push $REGISTRY/frontend:${CI_COMMIT_SHORT_SHA}

# ---------- BACKEND JOBS ----------

build-backend:
  stage: build
  script:
    - |
      echo "BACKEND_PORT=$BACKEND_PORT" > backend/.env
      echo "DB_USERNAME=$DB_USERNAME" >> backend/.env
      echo "DB_PASSWORD=$DB_PASSWORD" >> backend/.env
      echo "DB_NAME=$DB_NAME" >> backend/.env
      echo "DB_PORT=$DB_PORT" >> backend/.env
      echo "DB_HOST=$DB_HOST" >> backend/.env
      echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> backend/.env
      echo "DATABASE_URL=postgresql://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=public" >> backend/.env
      echo "GOOGLE_OAUTH_CLIENT_ID=$GOOGLE_OAUTH_CLIENT_ID" >> backend/.env
      echo "GOOGLE_OAUTH_CLIENT_SECRET=$GOOGLE_OAUTH_CLIENT_SECRET" >> backend/.env
      echo "GOOGLE_OAUTH_CALLBACK_URL=$GOOGLE_OAUTH_CALLBACK_URL" >> backend/.env
      echo "GOOGLE_OAUTH_SCOPE_ONE=$GOOGLE_OAUTH_SCOPE_ONE" >> backend/.env
      echo "GOOGLE_OAUTH_SCOPE_TWO=$GOOGLE_OAUTH_SCOPE_TWO" >> backend/.env
      echo "SESSION_SALT=$SESSION_SALT" >> backend/.env
      echo "JWT_ACCESS_TOKEN=$JWT_ACCESS_TOKEN" >> backend/.env
      echo "JWT_ACCESS_TOKEN_DURATION=$JWT_ACCESS_TOKEN_DURATION" >> backend/.env
      echo "JWT_REFRESH_TOKEN=$JWT_REFRESH_TOKEN" >> backend/.env
      echo "JWT_REFRESH_TOKEN_DURATION=$JWT_REFRESH_TOKEN_DURATION" >> backend/.env
      echo "FRONT_END_LINK=$FRONT_END_LINK" >> backend/.env
    - docker build -t $REGISTRY/backend:$TEMP_TAG ./backend
    - docker push $REGISTRY/backend:$TEMP_TAG

test-backend:
  stage: test
  needs: [build-backend]
  script:
    - docker pull $REGISTRY/backend:$TEMP_TAG
    - docker run --rm $REGISTRY/backend:$TEMP_TAG npm test

push-backend:
  stage: push
  needs: [test-backend]
  script:
    - docker pull $REGISTRY/backend:$TEMP_TAG
    - docker tag $REGISTRY/backend:$TEMP_TAG $REGISTRY/backend:$DEFAULT_TAG
    - docker tag $REGISTRY/backend:$TEMP_TAG $REGISTRY/backend:${CI_COMMIT_SHORT_SHA}
    - docker push $REGISTRY/backend:$DEFAULT_TAG
    - docker push $REGISTRY/backend:${CI_COMMIT_SHORT_SHA}

# ---------- DEPLOY TO AWS ECS ----------

deploy-to-ecs:
  stage: deploy
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  before_script: []
  after_script: []  # <-- fixed key
  script:
    - aws sts get-caller-identity
    - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_BACKEND_SERVICE --force-new-deployment
    - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_FRONTEND_SERVICE --force-new-deployment